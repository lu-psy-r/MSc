---
title: Week 18. Developing linear mixed-effects models
subtitle: Written by Rob Davies
order: 10
bibliography: references.bib
csl: psychological-bulletin.csl
---

# Week 18 Developing linear mixed-effects models: workbook overview {#sec-dev-mixed-workbook-overview}

Welcome to your overview of the work we will do together in **Week 18**.

We have been learning to:

-   **To recognize** the situations where we shall see multilevel structured data and therefore where we will need to apply multilevel or mixed-effects models.
-   **To understand** the nature and the advantages of these models: what they are, and why they work better than other kinds of models, given multilevel data.
-   **To practice** how we code for mixed-effects models, and how we read or write about the results.

We now need to develop our understanding and skills further. And we now need to examine some of the complexities that we may face when we work with mixed-effects models.

::: callout-important
## The key idea
Shrinkage or regularization means that models of data should be excited by the data but *not too* excited.
:::

## Targets {#sec-dev-mixed-workbook-targets}

We have three capacities that we are seeking to develop this week:

1.  to understand mixed-effects models;
2.  to work with these models practically or efficiently in R;
3.  and to communicate their results effectively (to ourselves and others).

### Targets {#sec-dev-mixed-workbook-targets-checklist}

You can test your development against this checklist of targets for learning.

1.  We want to develop the capacity to **understand** mixed-effects models, the capacity to:

-   recognize where data have a multilevel structure;
-   recognize where multilevel or mixed-effects models are required;
-   distinguish the elements of a mixed-effects model, including fixed effects and random effects;
-   explain how random effects can be understood in terms of random differences (or deviations) between groups or classes or individuals, in intercepts or slopes;
-   explain how random effects can be understood in terms of variances, as a means to account for random differences between groups or classes or individuals in intercepts or slopes;
-   explain how mixed-effects models work better than linear models, for multilevel structured data;
-   explain how mixed-effects models work better because they allow partial-pooling of estimates.

2.  We want to develop the capacity to **work practically** with mixed-effects models in R, the capacity to:

-   specify a mixed-effects model in `lmer()` code;
-   identify how the mixed-effects model code varies, depending on the kinds of random effects that are assumed;
-   identify the elements of the output or results that come from an `lmer()` mixed-effects analysis;
-   interpret the fixed-effects estimates;
-   interpret the random effects estimates, including both the variance and covariance estimates.

3.  We want to develop the capacity to **communicate** the results of mixed-effects models effectively, to ourselves and to others, the capacity to:

-   describe in words and summary tables the results of a mixed-effects model;
-   visualize the effects estimates or predictions from a mixed-effects model.

## Learning resources {#sec-dev-mixed-workbook-resources}

You will see, next, the lectures we share to explain the concepts you will learn about, and the practical data analysis skills you will develop. Then you will see information about the practical materials you can use to build and practise your skills.

Every week, you will learn best if you *first* watch the lectures *then* do the practical exercises.

::: callout-tip
### Linked resources
To support your learning, you can read about the ideas and the practical coding required for analyses in the chapters I wrote for this course.

1. We learned about multilevel structured data in the [conceptual introduction to multilevel data](../part2/01-multilevel.qmd#sec-intro-multilevel) and the [workbook introduction to multilevel data](../part2/01-multilevel-workbook.qmd#sec-multilevel-workbook-overview).
2. We then deepened our understanding by looking at the analysis of data from studies with **repeated-measures designs** in the [conceptual introduction to linear mixed-effects models](../part2/02-mixed.qmd#sec-intro-mixed) and the [workbook introduction to mixed-effects models](../part2/02-mixed-workbook.qmd#sec-mixed-effects-workbook-overview).
3. This week, you can find more in-depth explanations of analysis methods and key ideas in the [chapter on developing linear mixed-effects models](../part2/03-mixed.qmd#sec-dev-mixed).
:::

### Lectures {#sec-dev-mixed-workbook-lectures}

The lecture materials for this week are presented in three short parts.

Click on a link and your browser should open a tab showing the *Panopto* video for the lecture part.

1. Part 1 (13 minutes) Developing the capacity to understand and work with mixed-effects models: what we want to be able to do, and why; our working example data, and the study.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=6ee1618c-ced2-425b-9213-ace4011ea856&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="03-mixed-1-of-3" ></iframe>
```

2. Part 2 (13 minutes): Data tidying, data transformation, and why we do this work; sample data, variation and the benefits of pooling.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=01dccf63-8b1e-406c-8694-ace401229f10&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="03-mixed-2-of-3" ></iframe>
```

3. Part 3 (24 minutes): The elements and the logic of mixed-effects models; the impact of including random effects, pooling, shrinkage and regularisation; how mixed-effects models are estimated.

```{=html}
<iframe src="https://lancaster.cloud.panopto.eu/Panopto/Pages/Embed.aspx?id=ddde4efb-2975-4347-b255-ace401328b39&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all" height="405" width="720" style="border: 1px solid #464646;" allowfullscreen allow="autoplay" aria-label="Panopto Embedded Video Player" aria-description="03-mixed-3-of-3" ></iframe>
```

### Lecture slides {#sec-dev-mixed-workbook-slides}

::: callout-tip
## Download the lecture slides
You can download the lecture slides in three different versions:

- [402-week-19-LME-3.pdf](files/402-week-19-LME-3.pdf): high resolution .pdf, exactly as delivered [1.3 MB];
- [402-week-19-LME-3_1pp.pdf](files/402-week-19-LME-3_1pp.pdf): printable version, one-slide-per-page [1.2 MB];
- [402-week-19-LME-3_6pp.pdf](files/402-week-19-LME-3_6pp.pdf): printable version, six-slides-per-page [1.3 MB].

The high resolution version is the version delivered for the lecture recordings. To make the slides easier to download, I produced lower resolution versions: 1pp and 6pp. These should be easier to download and print out if that is what you want to do.
:::

### Practical materials: data and R-Studio {#sec-dev-mixed-workbook-practical}

We will be working with the **ML word recognition study** dataset. ML examined *visual* word recognition in younger and older adults using the lexical decision task.

In lexical decision, participants are presented with a stimulus: a string of letters that is either a real word (e.g., 'car') or a made-up or non-word (e.g., 'cas'). Participants are required to respond to the stimulus by pressing a button to indicate either that they think the stimulus is a word or that they think it is a non-word. Each complete sequence of events, in which a stimulus is presented and a response is recorded, is known as a *trial*. In the lexical decision task implemented by ML, all study participants were presented with a mix of 160 word stimuli and 160 non-word stimuli, in random order, in a total of 320 trials.

Each stimulus was presented one at a time on the computer screen. The critical outcome measure was the reaction time (RT) or latency for each response. Observed RT represents the interval of time from the moment the stimulus was first presented (the stimulus onset) to the moment the response was made (the response onset).

The critical feature of the study, here, is that we have an outcome -- a decision response -- observed multiple times (for each stimulus) for each participant. We shall be analyzing the speed of response, reaction time (RT), measured in milliseconds (ms).

You can read more about these data in the [chapter on developing linear mixed-effects models](../part2/03-mixed.qmd#sec-dev-mixed).

Instead of posing a simple and general research question, we shall orient our work around a set of quite specific predictions. ML hypothesized:

1.  Effects of stimulus attributes

-   Predicting that words that are shorter, that look like more other words, and that appear frequently in the language will be easier to recognize.

2.  Effects of participant attributes

-   Predicting that older readers would be faster and more accurate than younger readers in word recognition.

3.  Effects of interactions between the effects of word attributes and person attributes.

-   Predicting that better (older) readers will show smaller effects of word attributes.

::: callout-important
**Get the data**: get the data file and the .R script you can use to do the exercises that will support your learning.

- You can download the files folder for this chapter by clicking on the link [03-mixed.zip](files/03-mixed.zip).
:::

The practical materials folder includes a data file and an `.R` script:

-   `subjects.behaviour.words-310114.csv` which holds information about the (word) stimuli, participants, and the responses recorded in the ML study.

The `.csv` file is a *comma separated values* file and can be opened in Excel.

The data file is collected together with the .R script:

-   `402-03-mixed-workbook.R` the workbook you will need to do the practical exercises.

::: callout-important
You can access the sign-in page for [R-Studio Server here](https://psy-rstudio.lancaster.ac.uk/auth-sign-in?appUri=%2F)
:::

#### Practical materials guide {#sec-dev-mixed-workbook-practical-guide}

We have reached the stage where our learning targets can be detailed -- here, we are concerned with:

- being able to specify a mixed-effects model in `lmer()` code;
- being able to identify how the mixed-effects model code varies depending on the kinds of random effects;

- being able to identify the elements of the output or results that come from an `lmer()` mixed-effects analysis;
- being able to interpret the fixed-effects estimates;
- being able to interpret the random effects estimates, variance, covariance;

- being able to describe in words and summary tables the results of a mixed-effects model;
- being able to visualise the effects estimates from a mixed-effects model.

#### The practical exercises {#sec-dev-mixed-workbook-practical-workbook}

Now you will progress through a series of tasks, and challenges, to aid your learning.

::: callout-warning
We will work with the data file:

-   `subjects.behaviour.words-310114.csv`
:::

We again split the steps into into parts, tasks and questions.

We are going to work through the following workflow steps: **each step is labelled as a practical part**.

1. Set-up
2. Load the data
3. Tidy the data
4. Analyze data with lm
5. Analyze data with lmer
6. Compare models with different random effects
7. p-values and significance using `lmerTest`
8. Run your own sequence of lmer models
9. Optional: reproduce the plots in the chapter and slides

In the following, we will guide you through the tasks and questions step by step.

::: callout-important
An answers version of the workbook will be provided after the practical class.
:::

#### Practical Part 1: Set-up

To begin, we set up our environment in R.

##### Practical Task 1 -- Run code to load relevant libraries

Use the `library()` function to make the functions we need available to you.

:::{.callout-tip collapse="true"}
## Code
```{r}
library(broom)
library(gridExtra)
library(here)
library(lme4)
library(tidyverse)
```
:::

#### Practical Part 2: Load the data

##### Practical Task 2 -- Read in the data file we will be using

Read the data files into R:

:::{.callout-tip collapse="true"}
## Code
```{r}
ML.all <- read_csv("subjects.behaviour.words-310114.csv", na = "-999")
```
:::

The ML study data includes the following variables that we will work with (as well as some you can ignore):

1.  Identifying variables

-   `subjectID` -- identifying code for participants
-   `item_name` -- words presented as stimuli
-   `item_number` -- identifying code for words presented

2.  Response variables

-   `RT` -- response reaction time (ms), for responses to words, i.e., word recognition time

3.  Participant attribute variables

-   `Age` -- in years
-   `Gender` -- coded M (male), F (female)
-   `TOWRE_wordacc` -- word reading skill, words read correctly (out of 104)
-   `TOWRE_nonwordacc` -- nonword reading skill, nonwords (made up words) read correctly (out of 63)
-   `ART_HRminusFR` -- reading experience score

4.  Stimulus property variables

-   `Length` -- word length, in letters
-   `Ortho_N` -- orthographic neighbourhood size, how many other words in English a stimulus word looks like
-   `OLD` -- orthographic Levenshtein distance, how many letter edits (addition, deletion or substitution) it would take to make a stimulus word look like another English word (a measure of orthographic neighbourhood) [@Yarkoni2008b]
-   `BG_Sum, BG_Mean, BG_Freq_By_Pos` -- measures of how common are pairs of letters that compose stimulus words
-   `SUBTLWF, LgSUBTLWF, SUBTLCD, LgSUBTLCD` -- measures of how common stimulus words are, taken from the SUBTLEX corpus analysis of word frequency [@Brysbaert2009a]

#### Practical Part 3: Tidy the data

Tidying the data involves a number of tasks, some essential and some things we do for our convenience.

We are going to first filter the observations, then transform the outcome variable.

- We do this work and use data visualization to examine the impacts of the actions.

::: callout-tip
It is *always* a good idea to first inspect what you have got when you read a data file into R before you do anything more demanding.

-   You **cannot assume** that the data are what you think they are
-   or that the data are structured or coded in the ways that you think (or have been told) they should be structured or coded.
:::

##### Practical Task 3 -- Produce a density plot showing word recognition reaction time, for both correct and incorrect responses

We should examine the distribution of the outcome variable, lexical decision response reaction time (RT in ms). Observations about variable value distributions are a part of *Exploratory Data Analysis* and serve to catch errors in the dataset (e.g. incorrectly recorded scores) but also to inform the researcher's understanding of their own data.

:::{.callout-tip collapse="true"}
## Hint
We shall examine the distribution of the outcome variable, lexical decision response reaction time (RT in ms), using density plots. An alternative method would be to use histograms.

A density plot shows a curve. You can say that the density corresponds to the height of the curve for a given value of the variable being depicted, and that it is related to the probability of observing values of the variable within some range of values [@howell2016fundamental].
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
#| label: fig-rt-all-density
#| fig-cap: "Density plot showing word recognition reaction time, correct and incorrect responses"
#| fig-alt: "Density plot showing word recognition reaction time, correct and incorrect responses. The figure shows a black line, a curve peaking over RT = about 500 but ranging between -2000 and +2000. Under the curve, a series of black tick marks are shown under the x-axis border."
#| warning: false
#| message: false
#| fig-height: 5
#| fig-width: 5
ML.all %>%
  ggplot(aes(x = RT)) +
  geom_density(size=1.5) +
  geom_rug(alpha = .2) +
  ggtitle("Raw RT") +
  theme_bw()  
```

The code to produce @fig-rt-all-density works in a series of steps.

1.  `ML.all %>%` takes the dataset, from the ML study, that we have read in to the R workspace and pipes it to the visualization code, next.
2.  `ggplot(aes(x = RT)) +` creates a plot object in which the x-axis variable is specified as `RT`. The values of this variable will be mapped to geometric objects, i.e. plot features, that you can see, next.
3.  `geom_density(size=1.5) +` first displays the distribution of values in the variable `RT` as a density curve. The argument `size=1.5` tells R to make the line $1.5 \times$ the thickness of the line used by default to show variation in density.

Some further information is added to the plot, next.

4.  `geom_rug(alpha = .2) +` with a command that tells R to add a rug plot below the density curve.
5.  `ggtitle("Raw RT")` makes a plot title.

Notice that beneath the curve of the density plot, you can see a series of vertical lines. Each line represents the x-axis location of an RT observation in the ML study data set. This *rug plot* represents the distribution of RT observations in one dimension.

-   `geom_rug()` draws a vertical line at each location on the x-axis that we observe a value of the variable, RT, named in `aes(x = RT)`.
-   `geom_rug(alpha = .2)` reduces the opacity of each line, using `alpha`, to ensure the reader can see how the RT observations are denser in some places than others.
:::

##### Practical Task 4 -- You should try out alternative visualisation methods to reveal the patterns in the distribution of variables in the ML dataset (or in your own data).

1.  Take a look at the `geoms` documented in the `{ggplot2}` library reference section [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).
2.  Experiment with code to answer the following questions:

-   Would a histogram or a frequency polygon provide a more informative view? Take a look [here for advice](https://ggplot2.tidyverse.org/reference/geom_histogram.html).
-   What about a dotplot? Take a look [here for advice](https://ggplot2.tidyverse.org/reference/geom_dotplot.html)

##### Practical Task 5 -- Filter out incorrect and outlier short RT observations

The code example, shown above, delivers a plot (@fig-rt-all-density) showing three peaks in the distribution of RT values. You can see that there is a peak of RT observations around 500-1000ms, another smaller peak around -500ms, and a third smaller peak around -2000ms.

The density plot shows the reaction times recorded for participants' button press 'yes' responses to word stimuli in the lexical decision task. The peaks of negative RTs represent observations that are *impossible*.

- How do we deal with the impossible RT values?

:::{.callout-tip collapse="true"}
## Hint
The density plot shows us that the raw ML lexical decision `RT` variable includes negative RT values corresponding to incorrect response. These have to be removed. 

- We can do this quite efficiently by creating a subset of the original "raw" data, defined according to the RT variable using the `{dpyr}` library `filter()` function.
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
#| label: filter
ML.all.correct <- filter(ML.all, RT >= 200)
```

The filter code is written to subset the data by rows **using a condition** on the values of the `RT` variable.

`ML.all.correct <- filter(ML.all, RT >= 200)` works as follows.

1.  `ML.all.correct <- filter(ML.all ...)` creates a new dataset with a new name `ML.all.correct` from the old dataset `ML.all` using the `filter()` function.
2.  `filter(... RT >= 200)` specifies an argument for the `filter()` function.

In effect, we are asking R to check every value in the `RT` column.

-   R will do a check through the `ML.all` dataset, row by row.
-   *If* a row includes an RT that is greater than or equal to 200 *then* that row will be included in the new dataset `ML.all.correct`. This is what I mean by **using a condition**.
-   *But if* a row includes an RT that is less than 200, then that row will not be included. We express this condition as `RT >= 200`.
:::

##### Practical Task 6 -- Check out the impact of filtering on the number of rows in the dataset

- How can we check that the filter operation worked in the way we should expect it to?

After we have removed negative (error) RTs, we can check that the size of the dataset -- here, the number of rows -- matches our expectations.

- How do we do that?

:::{.callout-tip collapse="true"}
## Hint
The `length()` function will count the elements in whatever object is specified as an argument in the function call.

-   This means that if you put a variable name into the function as in `length(data$variable)` it will count how long that variable is -- how many rows there are in the column.
-   If that variable happens to be, as here, part of a data-set, the same calculation will tell you how many rows there are in the data-set as a whole.
-   If you just enter `length(data)`, naming some data-set, then the function will return a count of the number of columns in the data-set.
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
#| label: length-check
length(ML.all$RT)
length(ML.all.correct$RT)
```

If you run the `length()` function calls then you should see that the *length* or number of observations or rows in the `ML.all.correct` dataset should be smaller than the number of observations in the `ML.all` dataset.
:::

::: callout-tip
It is wise to *check* that the operations you perform to tidy, process or wrangle data *actually do* do what you mean them to do. Checks can be performed, for each processing stage, by:

1.  Forming expectations or predictions about what the operation is supposed to do e.g. filter out some rows by some number;
2.  Check what you get against these predictions e.g. count the number of rows before versus after filtering.
:::

##### Practical Task 7 -- Produce a density plot showing word recognition reaction time, for correct responses only

:::{.callout-tip collapse="true"}
## Code
```{r}
#| label: fig-rt-correct-density
#| fig-cap: "Density plot showing word recognition reaction time, correct responses only"
#| fig-alt: "Density plot showing word recognition reaction time, correct and incorrect responses. The figure shows a black line, a curve peaking over RT = about 500 now ranging between 0 and +2000. Under the curve, a series of black tick marks are shown under the x-axis border. The skew towards high values is now more obvious."
#| warning: false
#| message: false
#| fig-height: 5
#| fig-width: 5
ML.all.correct %>%
  ggplot(aes(x = RT)) +
  geom_density(size=1.5) + 
  geom_rug(alpha = .2) +
  ggtitle("Correct RTs") +
  theme_bw()
```
:::

##### Practical Task 8 -- Vary the filter conditions in different ways:

1.  Change the threshold for including RTs from `RT >= 200` to something else: you can change the number, or you can change the operator from `>=` to a different comparison (try `=, <, <=, >`.
2.  Can you assess what impact the change has?

##### Practical Task 9 -- Transform RT to log base 10 RT

@fig-rt-correct-density shows that we have successfully removed all errors (negative RTs) but now we see just how skewed the RT distribution is. Note the *long tail* of longer RTs.

Generally, we assume that departures from a model's predictions about our observations (the linear model residuals) are normally distributed, and we often assume that the relationship between outcome and predictor variables is linear [@Cohen2003c]. We can ensure that our data are compliant with both assumptions by transforming the RT distribution.

- What transformation should we use?

:::{.callout-tip collapse="true"}
## Hint
Psychology researchers often take the log (often the log base 10) of RT values before performing an analysis. Transforming RTs to the log base 10 of RT values has the effect of correcting the skew -- bringing the larger RTs 'closer' (e.g., $1000 = 3$ in log10) to those near the middle which do not change as much (e.g. $500 = 2.7$ in log10).
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
#| label: log-transform
ML.all.correct$logrt <- log10(ML.all.correct$RT)			
```

The `log10()` function works as follows:-

1.  `ML.all.correct$logrt <- log10(...)` creates a a new variable `logrt`, adding it to the `ML.all.correct` dataset. The variable is created using the transformation function `log10()`.
2.  `log10(ML.all.correct$RT)` creates a the new variable by transforming (to log10) the values of the old variable, `RT`.
:::

##### Practical Task 10 -- Produce a density plot showing log10 transformed reaction time, correct responses only

We can see the effect of the transformation if we plot the log10 transformed RTs (see @fig-rt-correct-log-density). 

- Do we arrive at a distribution that more closely approximates the normal distribution?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| label: fig-rt-correct-log-density
#| fig-cap: "Density plot showing log10 transformed reaction time, correct responses only"
#| fig-alt: "Density plot showing word recognition reaction time, correct and incorrect responses. The figure shows a black line, a curve peaking over logrt = about 2.8 ranging between 2.4 and 3.5. Under the curve, a series of black tick marks are shown under the x-axis border. The skew towards high values is now considerably reduced."
#| warning: false
#| message: false
#| fig-height: 5
#| fig-width: 5
ML.all.correct %>%
  ggplot(aes(x = logrt)) +
  geom_density(size = 1.5) + 
  geom_rug(alpha = .2) +
  ggtitle("Correct log10 RTs") +
  theme_bw()
```
:::

::: callout-tip
There are other log transformation functions and we often see researchers using the natural log instead of the log base 10 as discussed [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/log)
:::

##### Practical Task 11 -- Produce a density plot showing log10 transformed reaction time, correct responses, separately for each participant

ML asked all participants in a sample of people to read a selection of words, a sample of words from the language.

For each participant, we will have multiple observations and these observations will not be independent. One participant will tend to be slower or less accurate compared to another. 

- What does this look like?

:::{.callout-tip collapse="true"}
## Code
```{r}
#| label: fig-rt-correct-log-den-by-subj
#| fig-cap: "Density plot showing log10 transformed reaction time, correct responses, separately for each participant"
#| fig-alt: "The figure presents a grid of density plots showing log10 transformed reaction time, correct responses, separately for each participant. A dashed red line is drawn through all plots, indicating the mean RT. The curves vary in both the location of the peak and in the shape of the curve."
#| warning: false
#| message: false
#| fig-height: 10
#| fig-width: 8
ML.all.correct %>%
  group_by(subjectID) %>%
  mutate(mean_logrt = mean(logrt, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(subjectID = fct_reorder(subjectID, mean_logrt)) %>%
  ggplot(aes(x = logrt)) +
  geom_density(size = 1.25) +
  facet_wrap(~ subjectID) +
  geom_vline(xintercept = 2.778807, colour = "red", linetype = 2) +
  scale_x_continuous(breaks = c(2.5,3)) +
  ggtitle("Plot showing distribution of logRT for each participant; red line shows mean log10 RT") +
  theme_bw()
```
:::

##### Practical Task 12 -- Can you work out how to adapt the plotting code to show a grid of histograms?

##### Practical Task 13 -- Can you work out how to adapt the code to show a grid of plots indicating the distribution of log RT by different items (instead of participants)?

For each stimulus word, there are multiple observations and these observations will not be independent. One stimulus may prove to be more challenging to all participants compared to another, eliciting slower or less accurate responses on average.

- What does this look like?

#### Practical Part 4: Analyze data with lm

##### Practical Task 14 -- Fit a linear model with log10 RT as the outcome and word frequency (`LgSUBTLCD`) as the predictor

We model the effects of interest, using all the data (hence, *complete pooling*) but ignoring the differences between participants. This means we can see something of the 'true' picture of our data through the linear model results though we should be aware that the linear model will miss important information, which the mixed-effects model will include, that would improve its performance.

:::{.callout-tip collapse="true"}
## Hint
The linear model is fit in R using the `lm()` function.
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
ML.all.correct.lm  <- lm(logrt ~
                             
                             LgSUBTLCD,     
                           
                           data = ML.all.correct)

summary(ML.all.correct.lm)
```
:::

Vary the linear model using different outcomes or predictors.

-   The ML study data, like the CP study data, are rich with possibility. It would be useful to experiment with data like this because this will prepare you for similar analysis targets in future.
- Change the predictor from frequency to something else: what do you see when you visualize the relationship between outcome and predictor variables using scatterplots?

::: callout-tip
Specify linear models with different predictors: do the relationships you see in plots match the coefficients you see in the model estimates?

- You should both estimate the effects of variables *and* visualize the relationships between variables using scatterplots. 
- If you combine reflection on the model estimates with evaluation of what the plots show you then you will be able to see how reading model results and reading plots can reveal the correspondences between the two ways of looking at your data.
:::

#### Practical Part 5: Analyze data with lmer

##### Practical Task 15 -- Fit a linear mixed-effects model to estimate the effect of frequency on log RT while taking into account random effects

You should specify, here, a model of the frequency effect that takes into account:

- the random effect of participants on intercepts;
- the random effect of participants on the slopes of the frequency (`LgSUBTLCD`) effect;
- as well as the random effect of items on intercepts.

You can specify the random effects of participants allowing for covariance between the random intercepts and the random slopes.

:::{.callout-tip collapse="true"}
## Code
```{r}
ML.all.correct.lmer  <- lmer(logrt ~

                           LgSUBTLCD +

                           (LgSUBTLCD + 1|subjectID) +

                           (1|item_name),

                         data = ML.all.correct)

summary(ML.all.correct.lmer)
```

As will now be getting familiar, the code works as follows:

1.  `ML.all.correct.lmer  <- lmer(...)` creates a *linear mixed-effects model* object using the `lmer()` function.
2.  `logrt ~ LgSUBTLCD` the fixed effect in the model is expressed as a formula in which the outcome or dependent variable `logrt` is predicted `~` by the independent or predictor variable `LgSUBTLCD` word frequency.

The random effects part of the model is then specified as follows.

3.  We first have the random effects associated with random differences between participants:

-   `(...|subjectID)` adds random effects corresponding to random differences between sample groups (participants subjects) coded by the `subjectID` variable.
-   `(...1 |subjectID)` including random differences between sample groups (`subjectID`) in intercepts coded `1`.
-   `(LgSUBTLCD... |subjectID)` and random differences between sample groups (`subjectID`) in the slopes of the frequency effect coded by using the`LgSUBTLCD` variable name.

4.  Then, we have the random effects associated with random differences between stimuli:

-   `(1|item_name)` adds a random effect to account for random differences between sample groups (`item_name`) in intercepts coded `1`.

5.  `...(..., data = ML.all.correct)` specifies the dataset in which you can find the variables named in the model fitting code.
6.  Lastly, we can then specify `summary(ML.all.correct.lmer)` to get a summary of the fitted model.
:::

- Can you explain the results shown in the model summary?

You can be guided by the in-depth explanation of how. to read the analysis results in the [chapter on developing linear mixed-effects models](../part2/03-mixed.qmd#sec-dev-mixed-lmer-results).

#### Practical Part 6: Compare models with different random effects

##### Practical Task 16 -- Fit a linear mixed-effects model to estimate the effect of frequency on log RT while taking into account different sets of random effects

You can specify models where the fixed effects part is the same (e.g., you assume $RT \sim $ word frequency) but, for various reasons, you may suppose different random effects structures.

In this scenario --- the model fixed effects part is the same but the random effects are different --- you may be required to evaluate which model structure fits the data better, to the extent that that can be assessed, given your sample data.

1. To begin, fit a model with just the fixed effects of intercept and frequency, and the random effects of participants or items on intercepts only. 

- We exclude the `(LgSUBTLCD + ...|subjectID)` specification for the random effect of participants on the slope of the frequency `LgSUBTLCD` effect.

We use REML fitting, if we want to compare (as we will) models with the same fixed effects but different random effects.

:::{.callout-tip collapse="true"}
## Code
```{r}
ML.all.correct.lmer.REML.si  <- lmer(logrt ~ LgSUBTLCD + 
                                    
                                          (1|subjectID) + (1|item_name),

       data = ML.all.correct, REML = TRUE)

summary(ML.all.correct.lmer.REML.si)
```

If you look at the code chunk, you can see that:

-   `REML = TRUE` is the only change to the code: it specifies the change in model fitting method;
-   also, I changed the model name to `ML.all.correct.lmer.REML.si` to be able to distinguish the maximum likelihood from the restricted maximum likelihood model.
:::

Following @baayen2008, we can then run a series of models with just one random effect. 

2. Next, fit a model with just the random effect of items on intercepts.

:::{.callout-tip collapse="true"}
## Code
```{r}
ML.all.correct.lmer.REML.i  <- lmer(logrt ~

       LgSUBTLCD + (1|item_name),

       data = ML.all.correct, REML = TRUE)

summary(ML.all.correct.lmer.REML.i)
```
:::

3. Next, fit a model with just the random effect of participants on intercepts.

:::{.callout-tip collapse="true"}
## Code
```{r}
ML.all.correct.lmer.REML.s  <- lmer(logrt ~

       LgSUBTLCD + (1|subjectID),

       data = ML.all.correct, REML = TRUE)

summary(ML.all.correct.lmer.REML.s)
```
:::

::: callout-tip
Notice how each different model has a distinct name.

- We will use these different names to compare the models, next.
:::

##### Practical Task 17 -- Compare the different models using `anova()`

If we now run Likelihood Ratio Test comparisons of these models, we are effectively examining if one of the random effects can be dispensed with: if its inclusion makes no difference to the likelihood of the model then it is not needed. 

- Is the random effect of subjects on intercepts justified?

:::{.callout-tip collapse="true"}
## Hint
Compare models, first, with `ML.all.correct.lmer.REML.si` versus without `ML.all.correct.lmer.REML.i` the random effect of subjects on intercepts.
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
anova(ML.all.correct.lmer.REML.si, ML.all.correct.lmer.REML.i, refit = FALSE)
```
:::

- Is the random effect of items on intercepts justified?

:::{.callout-tip collapse="true"}
## Hint
Compare models with `ML.all.correct.lmer.REML.si` versus without `ML.all.correct.lmer.REML.s` the random effect of items on intercepts.
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
anova(ML.all.correct.lmer.REML.si, ML.all.correct.lmer.REML.s, refit = FALSE)
```
:::

We compare models using the `anova()` function.

-   `anova()` does the model comparison, for the models named in the list in brackets.

You can do this for the foregoing series of models but notice that in the code we specify:

- `refit = FALSE`

What happens if we do not add that bit?

What you will see if you run the `anova()` function call, without the`refit = FALSE` argument -- try it -- is that you will then get the warning `refitting model(s) with ML (instead of REML)`. 

Why? 
The immediate reason for this warning is that we have to specify `refit = FALSE` because otherwise R will compare ML fitted models. The refitting occurs by default.

What is the reason for the imposition of this default?

@Pinheiro2000aa advise that if one is fitting models with random effects the estimates are more accurate if the models are fitted using Restricted Maximum Likelihood (REML). That is achieved in the `lmer()` function call by adding the argument `REML=TRUE`. 
@Pinheiro2000aa further recommend (see, e.g., pp.82-) that if you compare models:

- with the same fixed effects 
- but with varying random effects
- then the models *should be fitted using Restricted Maximum Likelihood*.

Read a discussion of the issues, with references, in [chapter on developing linear mixed-effects models](../part2/03-mixed.qmd#sec-dev-mixed-anova-advice).
See that chapter, also, for an in-depth account of what the 'anova()` results tell you.

##### Practical Task 18 -- Now examine whether random slopes are required

Is it justified to add a random effect of participants on the slopes of the frequency effect?

- How should you address this question?

First, you will need to fit a model incorporating the random effect of participants on the slopes of the frequency effect.

:::{.callout-tip collapse="true"}
## Hint
You will want to make sure that this random slopes model is comparable to the next-most complex model: `ML.all.correct.lmer.REML.si`.
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
ML.all.correct.lmer.REML.slopes  <- lmer(logrt ~ LgSUBTLCD + 
                                           
                                          (LgSUBTLCD + 1|subjectID) +
                                          (1|item_name),

       data = ML.all.correct, REML = TRUE)
```

Looking at the code:

-   With `(LgSUBTLCD + 1 |subjectID)` we specify a random effect of subjects on intercepts and on the slope of the frequency effects.
-   We do not specify -- it happens by default -- the estimation of the covariance of random differences among subjects in intercepts and random differences among subjects in the slope of the frequency effect.
:::

Then you will want to compare two models that are the same *except* for the incorporation of the the random effect of participants on the slopes of the frequency effect.

:::{.callout-tip collapse="true"}
## Code
```{r}
anova(ML.all.correct.lmer.REML.si, ML.all.correct.lmer.REML.slopes, 
      refit = FALSE)
```
:::

#### Practical Part 7: p-values and significance using `lmerTest`

If you look at the fixed effects summary, you can see that we do not get p-values by default. To calculate p-values, we need to count residual degrees of freedom. The authors of the `{lme4}` library that furnishes the `lmer()` function do not [as e.g. @Baayen2008 discuss] think that it is sensible to estimate the residual degrees of freedom for a model in terms of the number of observations. This is because the number of observations concerns one level of a multilevel dataset that might be structured with respect to some number of subjects, some number of items. This means that one cannot then accurately calculate p-values to go with the t-tests on the coefficients estimates; therefore they do not.

##### Practical Task 19 -- Get p-values using lmerTest

We can run mixed-effects models with p-values from significance tests on the estimates of the fixed effects coefficients using the `library(lmerTest)`.

:::{.callout-tip collapse="true"}
## Code
```{r}
#| message: false
#| warning: false
library(lmerTest)

ML.all.correct.lmer.REML.slopes  <- lmer(logrt ~ LgSUBTLCD + 
                                           
                                            (LgSUBTLCD + 1|subjectID) +
                                            (1|item_name),

                                          data = ML.all.correct, REML = TRUE)

summary(ML.all.correct.lmer.REML.slopes)
```
:::

Basically, the call to access the `lmerTest` library ensures that when we run the `lmer()` function we get a calculation of an approximation to the denominator degrees of freedom that enables the calculation of the p-value for the t-test for the fixed effects coefficient.

::: callout-tip
An alternative approach to doing significance tests of hypothesized effects, is to compare models with versus without the effect of interest.
:::

#### Practical Part 8: Run your own sequence of lmer models

It will be useful for you to examine model comparisons with a different set of models for the same data.

You could try to run a series of models in which the fixed effects variable is something different, for example, the effect of word `Length` or the effect of orthographic neighbourhood size `Ortho_N`.

- Run models with these variables or pick your own set of predictor variables to get estimates of fixed effects.

In this series of models, specify a set of models where:

- Each model has the same fixed effect e.g. `logrt ~ Length`;
- But you vary the random effects components so that, at the end, you can assess what random effects are justified by better model fit to data.

In the following, I set out another series of models as an example of what you can do.

1. Random effects of participants on intercepts and slopes, random effect of items on intercepts

:::{.callout-tip collapse="true"}
## Code
```{r}
#| message: false
#| warning: false
ML.all.correct.lmer.REML.slopes  <- lmer(logrt ~ Length + 
                                           
                                           (Length + 1|subjectID) +
                                           (1|item_name),
                                         
                                         data = ML.all.correct, REML = TRUE)

summary(ML.all.correct.lmer.REML.slopes)
```
:::

2. Random effect of participants on intercepts, random effect of items on intercepts

:::{.callout-tip collapse="true"}
## Code
```{r}
#| message: false
#| warning: false
ML.all.correct.lmer.REML.si  <- lmer(logrt ~ Length + 
                                       
                                       (1|subjectID) + 
                                       (1|item_name),
                                     
                                     data = ML.all.correct, REML = TRUE)

summary(ML.all.correct.lmer.REML.si)
```
:::

3. Random effect of items on intercepts

:::{.callout-tip collapse="true"}
## Code
```{r}
#| message: false
#| warning: false
ML.all.correct.lmer.REML.i  <- lmer(logrt ~ Length + 
                                       
                                       (1|item_name),
                                     
                                     data = ML.all.correct, REML = TRUE)

summary(ML.all.correct.lmer.REML.i)
```
:::

4. Random effect of participants on intercepts

:::{.callout-tip collapse="true"}
## Code
```{r}
#| message: false
#| warning: false
ML.all.correct.lmer.REML.s  <- lmer(logrt ~ Length + 
                                      
                                      (1|subjectID),
                                    
                                    data = ML.all.correct, REML = TRUE)

summary(ML.all.correct.lmer.REML.s)
```
:::

5. Model comparisons

I would compare the models in the sequence, shown in the foregoing, one pair of models at a time, to keep it simple.

- When you look at the model comparison, ask: is the difference between the models a piece of complexity (an effect) whose inclusion in the more complex model is justified or warranted by improved model fit to data?

:::{.callout-tip collapse="true"}
## Code
If we run model comparisons, we can see that random effects of subjects or of items on intercepts, as well as random effect of subjects on slopes, are justified by significantly improved model fit to data.

```{r}
#| message: false
#| warning: false
anova(ML.all.correct.lmer.REML.si, ML.all.correct.lmer.REML.s, refit=FALSE)
anova(ML.all.correct.lmer.REML.si, ML.all.correct.lmer.REML.i, refit=FALSE)
anova(ML.all.correct.lmer.REML.si, ML.all.correct.lmer.REML.slopes, refit=FALSE)
```
:::

#### Practical Part 7: Extension

Reproduce the plots in the chapter and slides

This part is optional for you to view and work with.

- Run the code, and consider the code steps *only* if you are interested in how the materials for the book chapter were created.

##### Practical Task 15 -- Visualize the relationship between frequency and RT, separately for each participant

What we aim to do is:

1. Model the effect of word frequency for each child, for their data considered separately.
2. Extract the coefficient estimate for the frequency effect for each separate model (per child).
3. Then plot these estimates, together with 

Can you figure out how to code these steps?

:::{.callout-tip collapse="true"}
## Code
```{r}
# -- First fit the model for each child
freqperchildlm <- long.all.noNAs %>%
  group_by(subjectID) %>% 
  do(tidy(lm(RT ~ Lg.UK.CDcount, data=.)))

# -- What does freqperchildlm hold: take a look?

# -- Make sure you can treat term as a factor
freqperchildlm$term <- as.factor(freqperchildlm$term)

# -- Get the intercept and frequency effect estimates
freqperchildlmint <- filter(freqperchildlm, term == '(Intercept)')
freqperchildlmfreq <- filter(freqperchildlm, term == 'Lg.UK.CDcount')

# -- Make the intercepts plots: order by size
pfreqperchildlmint <- freqperchildlmint %>%
  ggplot(aes(x = fct_reorder(subjectID, estimate), y = estimate, ymin = estimate - std.error, ymax = estimate + std.error)) + 
  geom_point() + geom_linerange() + 
  theme_bw() + 
  xlab("Intercepts in order of size") +
  ylab("Estimated intercept +/- SE") + 
  theme(axis.title.y = element_text(size = 10), 
        axis.text.y = element_text(size = 5), 
        axis.text.x = element_blank(), 
        panel.grid = element_blank())

# -- Make the slopes plots: order by size
pfreqperchildlmfreq <- freqperchildlmfreq %>%
  ggplot(aes(x = fct_reorder(subjectID, estimate), y = estimate, ymin = estimate - std.error, ymax = estimate + std.error)) + 
  geom_point() + geom_linerange() + 
  theme_bw() + 
  xlab("Frequency effect coefficient in order of size") +
  ylab("Estimated coefficient for the frequency effect +/- SE") + 
  theme(axis.title.y = element_text(size = 10), 
        axis.text.y = element_text(size = 5), 
        axis.text.x = element_blank(), 
        panel.grid = element_blank())

# -- Make a grid to show the plots side by side: in 2 columns
grid.arrange(pfreqperchildlmint, pfreqperchildlmfreq,
             ncol = 2) 
```
:::

##### Practical Task 16 -- Take the linear mixed-effects model, and plot the model predicted differences in intercepts or slopes

What we aim to do is:

1. Model the effect of word frequency for all the children, including random effects terms to take into account random differences between children in intercepts or in slopes.
2. Get the random effects estimates -- the between-children differences -- and plot them.

Can you figure out how to code these steps?

First, fit the model.

:::{.callout-tip collapse="true"}
## Code
```{r}
lmer.all.1 <- lmer(RT ~  Lg.UK.CDcount + (Lg.UK.CDcount + 1||subjectID),
                   
                   data = long.all.noNAs)
```
:::

Second, extract the random effects and plot them.

:::{.callout-tip collapse="true"}
## Hint
Plot the distribution of random effects -- usually called conditional modes.
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
BLUPS <- ranef(lmer.all.1)$subjectID
# summary(BLUPS)

BLUPS.df <- data.frame(subjectID = rownames(BLUPS), 
                       intercepts = BLUPS[,1], 
                       frequency = BLUPS[,2])
# summary(BLUPS.df)
# str(BLUPS.df)

p.BLUPS.intercepts <- BLUPS.df %>%
  ggplot(aes(x = intercepts)) +
  geom_histogram() + 
  ggtitle("(a.) Adjustment by child") +
  xlab("In the intercept") +
  geom_vline(xintercept = 0, colour = "red", size = 1.5) +
  theme_bw()

p.BLUPS.slopes <- BLUPS.df %>%
  ggplot(aes(x = frequency)) +
  geom_histogram() + 
  ggtitle("(b.) Adjustment by child") +
  xlab("In the frequency slope (coefficient)") +
  geom_vline(xintercept = 0, colour = "red", size = 1.5) +
  theme_bw()

grid.arrange(p.BLUPS.intercepts, p.BLUPS.slopes,
             ncol = 2
)
```
:::

##### Practical Task 17 -- Fit different kinds of mixed-effects model, then plot the resulting differences in model predictions

What we aim to do is:

1. Model the effect of word frequency for all the children, including (in different models) different random effects terms to take into account (in different ways) random differences between children in intercepts or in slopes.
2. Get the random effects estimates -- the between-children differences -- and plot the model predictions.

Can you figure out how to code these steps?

First, fit the models. We want to compare models with:

1. Random effects of participants on intercepts and on slopes.
2. Random effects of participants on intercepts.
3. Random effects of participants on slopes.

:::{.callout-tip collapse="true"}
## Code
```{r}
# -- Fit different kinds of mixed-effects model, then plot the resulting differences in model predictions

lmer.all.1 <- lmer(RT ~  Lg.UK.CDcount + (Lg.UK.CDcount + 1||subjectID),
                   
                   data = long.all.noNAs)

# summary(lmer.all.1)

lmer.all.2 <- lmer(RT ~  Lg.UK.CDcount + (1|subjectID),
                   
                   data = long.all.noNAs)

# summary(lmer.all.2)

lmer.all.3 <- lmer(RT ~  Lg.UK.CDcount + (Lg.UK.CDcount + 0|subjectID),
                   
                   data = long.all.noNAs)

# summary(lmer.all.3)
```
:::

Then derive predictions of the change in outcome, given variation in predictor values, assuming different random effects structures.

:::{.callout-tip collapse="true"}
## Hint
Plot random effect -- per person predictions -- following:

<https://bbolker.github.io/morelia_2018/notes/mixedlab.html>

In lmer, predict has a `re.form` argument that specifies which random effects should be included (NA or ~0=none, population level; NULL (=all) or ~subject=prediction at the subject level; more complex models, might have additional nested levels).
:::

:::{.callout-tip collapse="true"}
## Code
```{r}
# -- get predictions

long.all.noNAs$pred1 <- predict(lmer.all.1) ## individual level
long.all.noNAs$pred2 <- predict(lmer.all.2) ## individual level
long.all.noNAs$pred3 <- predict(lmer.all.3) ## individual level

# -- show predictions as slopes on top of raw data

p.slopes.intercepts <- long.all.noNAs %>%
  ggplot(aes(x = Lg.UK.CDcount, y = RT)) +
  geom_point(alpha = .25, colour = "darkgrey") +
  geom_line(aes(y = pred1, group = subjectID), colour="red", alpha = .4) +
  ggtitle("(c.)\n(Lg.UK.CDcount + 1||subjectID)") +
  xlab("Frequency (Lg.UK.CDcount)") +
  xlim(0,5) +
  theme_bw()

p.intercepts <- long.all.noNAs %>%
  ggplot(aes(x = Lg.UK.CDcount, y = RT)) +
  geom_point(alpha = .25, colour = "darkgrey") +
  geom_line(aes(y = pred2, group = subjectID), colour="red", alpha = .4) +
  ggtitle("(a.)\n(1|subjectID)") +
  xlab("Frequency (Lg.UK.CDcount)") +
  xlim(0,5) +
  theme_bw()

p.slopes <- long.all.noNAs %>%
  ggplot(aes(x = Lg.UK.CDcount, y = RT)) +
  geom_point(alpha = .25, colour = "darkgrey") +
  geom_line(aes(y = pred3, group = subjectID), colour="red", alpha = .4) +
  ggtitle("(b.)\n(Lg.UK.CDcount + 0|subjectID)") +
  xlab("Frequency (Lg.UK.CDcount)") +
  xlim(0,5) +
  theme_bw()

grid.arrange(p.intercepts, p.slopes, p.slopes.intercepts, 
             ncol = 3)
```
:::

##### Practical Task 18 -- Visualize the variation between items in intercepts -- for each `itemname`, plots ordered by `meanRT`

What we aim to do is:

1. Create a model for each item, including just the intercept.
2. Plot intercepts by-items -- ordering items by item_name by estimated intercept size.

Can you figure out how to code these steps?

First, create a model for each item, including just the intercept.

:::{.callout-tip collapse="true"}
## Code
```{r}
wperitemlm <- long.all.noNAs %>% 
  group_by(item_name) %>% 
  do(tidy(lm(RT ~ 1, data=.)))
wperitemlm$term <- as.factor(wperitemlm$term)
# wperitemlm
```
:::

Then plot intercepts by-items -- ordering items by item_name by estimated intercept size.

:::{.callout-tip collapse="true"}
## Code
```{r}
pwperitemlmint <- ggplot(wperitemlm, aes(x = fct_reorder(item_name, estimate), y = estimate, ymin = estimate - std.error, ymax = estimate + std.error))
pwperitemlmint + 
  geom_point() +
  geom_linerange() + 
  theme_bw() + 
  ylab("Estimated coefficient +/- SE") + 
  xlab("Per-item estimates of intercept, ordered by intercept estimate size") +
  theme(axis.title.y = element_text(size = 10), 
        axis.text.y = element_text(size = 5), 
        axis.text.x = element_blank(), panel.grid = element_blank())
```
:::

### The answers

After the practical class, we will reveal the answers that are currently hidden.

The answers version of the webpage will present my answers for questions, and some extra information where that is helpful.

